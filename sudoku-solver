#!/usr/bin/env python3

from sudoku import Sudoku, crange
import sys
import time

if __name__ == "__main__":

    # each Sudoku puzzle block has m rows and n columns
    (m, n) = map(int, input().split())

    # initialize the puzzle solver
    puzzle = Sudoku(m, n)

    # N = m*n is the number of rows/columns in the puzzle
    N = puzzle.size()

    # set the initially known values on the puzzle
    for i in crange(1, N):
        row = input().split()
        for j in crange(1, N):
            k = row[j - 1]
            if k.isdigit():
                puzzle.set_cell_value(i, j, int(k))
                
    start_time = time.time()

    # solve the puzzle
    if not puzzle.solve():
        sys.stdout.write("Sudoku puzzle is not valid.\n")
        exit(1)
        
    end_time = time.time()

    # print the solution
    digits = len(str(N))
    pad = lambda k: str(k).rjust(digits)
    
    # Only for 3x3 puzzles
    if m == 3 and n == 3:
        for i in crange(1, N):
            for j in crange(1, N):
                sys.stdout.write(pad(puzzle.get_cell_value(i, j)) + " ")
                if j % 3 == 0 and j < N:
                    sys.stdout.write("| ")
            sys.stdout.write("\n")
            if i % 3 == 0 and i < N:
                sys.stdout.write("{}+{}+{}\n".format("-"*6, "-"*7, "-"*6))
    else:
        for i in crange(1, N):
            for j in crange(1, N):
                k = puzzle.get_cell_value(i, j)
                sys.stdout.write("%s" % pad(k) + (" " if j < N else ""))
            sys.stdout.write("\n")  
        
    # Print the time taken
    print("\nTime elapsed: %.5f sec." % (end_time - start_time))
        
    sys.stdout.write("\n")