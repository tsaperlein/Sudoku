#!/usr/bin/env python3

import time

# Returns a string in the format x_{i,j,k}.
def read_input():
    # Read only m*n + 1 lines
    m, n = map(int, input().split())
    
    # Read the board
    board = []
    for i in range(m*n):
        row = input().split()
        for j in range(m*n):
            if row[j] == "_":
                row[j] = 0
            else:
                row[j] = int(row[j])
        board.append(row)
    
    return m, n, board

# Print the board.
def print_board(board):
    """
    Print the board.
    """
    for row in board:
        print(" ".join(str(x) for x in row))
        
# Check if k is valid at position (r, c).
def is_valid(grid, m, n, r, c, k):
    not_in_row = k not in grid[r]
    not_in_column = k not in [grid[i][c] for i in range(m*n)]
    not_in_box = k not in [grid[i][j] for i in range(r//m*m, r//m*m+m) for j in range(c//n*n, c//n*n+n)]
    return not_in_row and not_in_column and not_in_box

# Solve the sudoku puzzle.
def solve(grid, m, n, r=0, c=0):
    if r == m*n:
        return True
    elif c == m*n:
        return solve(grid, m, n, r+1, 0)
    elif grid[r][c] != 0:
        return solve(grid, m, n, r, c+1)
    else:
        for k in range(1, m*n+1):
            if is_valid(grid, m, n, r, c, k):
                grid[r][c] = k
                if solve(grid, m, n, r, c+1):
                    return True
                grid[r][c] = 0
        return False

# Main function
def main():
    m, n, board = read_input()
    start = time.time()
    if solve(board, m, n):
        print("\nSolution:")
        print_board(board)
    else:
        print("Sudoku puzzle is not valid.\n")
    end = time.time()
    print("\nTime elapsed: %.5f sec.\n" % (end - start))
    

if __name__ == "__main__":
    main()