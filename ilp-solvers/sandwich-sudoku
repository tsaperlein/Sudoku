#!/usr/bin/env python3

from sudoku import Sandwich_Sudoku, crange
import sys
import time

if __name__ == "__main__":
    
    """Read this input:
    3 3
    _ _ _ _ _ _ _ _ 8
    _ _ _ _ _ _ 5 _ _
    _ _ _ _ _ _ _ _ _
    _ _ _ _ _ _ _ 9 _
    _ _ _ _ _ _ _ _ _
    _ _ _ _ _ 9 _ _ _
    8 _ 1 _ _ _ _ _ _
    _ 9 _ _ _ _ _ _ _
    _ _ _ _ _ _ _ _ _

    rows: 0, 0, 5, 0, 0, 7, 17, 13, 2
    columns: 2, 11, 16, 20, 35, 6, 4, 2, 4
    
    But stop when the user enters the last number of the columns and goes to next line"""
    
    # Read only m*n + 1 lines
    m, n = map(int, input().split())
    
    # Read the board
    board = []
    for i in range(m*n):
        row = input().split()
        for j in range(m*n):
            if row[j] == "_" or row[j] == "0" or row[j] == "." or row[j] == "*" or row[j] == "?":
                row[j] = 0
            else:
                row[j] = int(row[j])
        board.append(row)
        
    input()
        
    # Get the constraints
    constraints = []
    # Until you stop reading "rows" in the start of the line, read the constraints      
    while True:
        try:
            line = input()
            if line.startswith("rows") or line.startswith("columns"):
                constraints.append(line.split(": ")[1].split(", "))
            else:
                break
        except EOFError:
            break
        
    sandwich_sudoku_puzzle = Sandwich_Sudoku(m, n, constraints)
    
    # N = m*n is the number of rows/columns in the Sandwich_Sudoku
    N = sandwich_sudoku_puzzle.size()

    # set the initially known values on the Sandwich_Sudoku
    for i in crange(1, N):
        for j in crange(1, N):
            k = board[i-1][j-1]
            if k != 0:
                sandwich_sudoku_puzzle.set_cell_value(i, j, int(k))
        
    start_time = time.time()

    # Solve the puzzle
    if not sandwich_sudoku_puzzle.solve():
        sys.stdout.write("Sandwich Sudoku puzzle is not valid.\n")
        exit(1)

    end_time = time.time()

    # Print the solution
    digits = len(str(m*n))
    pad = lambda k: str(k).rjust(digits)
    
    if m == 3 and n == 3:
        for i in crange(1, m*n):
            for j in crange(1, m*n):
                sys.stdout.write(pad(sandwich_sudoku_puzzle.get_cell_value(i, j)) + " ")
                if j % 3 == 0 and j < m*n:
                    sys.stdout.write("| ")
            sys.stdout.write("\n")
            if i % 3 == 0 and i < m*n:
                sys.stdout.write("{}+{}+{}\n".format("-"*6, "-"*7, "-"*6))
    else:
        for i in crange(1, m*n):
            for j in crange(1, m*n):
                k = sandwich_sudoku_puzzle.get_cell_value(i, j)
                sys.stdout.write("%s" % pad(k) + (" " if j < m*n else ""))
            sys.stdout.write("\n") 

    # Print the time taken
    print("Time elapsed: %.5f sec." % (end_time - start_time))

    sys.stdout.write("\n")