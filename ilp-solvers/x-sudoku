#!/usr/bin/env python3

from sudoku import X_Sudoku, crange
import sys
import time

def print_red_digit(k):
    return "\033[31m" + str(k) +"\033[0m"

if __name__ == "__main__":

    # each X-Sudoku block has m rows and n columns
    (m, n) = map(int, input().split())

    # initialize the X-Sudoku solver
    x_sudoku = X_Sudoku(m, n)

    # N = m*n is the number of rows/columns in the X-Sudoku
    N = x_sudoku.size()

    # set the initially known values on the X-Sudoku
    for i in crange(1, N):
        row = input().split()
        for j in crange(1, N):
            k = row[j - 1]
            if k.isdigit():
                x_sudoku.set_cell_value(i, j, int(k))
                
    start_time = time.time()

    # solve the X-Sudoku
    if not x_sudoku.solve():
        sys.stdout.write("X-Sudoku is not valid.\n")
        exit(1)
        
    end_time = time.time()

    # print the solution
    digits = len(str(N))
    pad = lambda k: str(k).rjust(digits)
    
    # Only for 3x3 X-Sudoku puzzles
    if m == 3 and n == 3:
        for i in crange(1, N):
            for j in crange(1, N):
                k = x_sudoku.get_cell_value(i, j)
                # Draw the diagonals in red
                if (i, j) in [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (9, 1), (8, 2), (7, 3), (6, 4), (4, 6), (3, 7), (2, 8), (1, 9)]:
                    sys.stdout.write("\033[31m" + str(k) +"\033[0m" + " ")
                else:
                    sys.stdout.write(pad(k) + " ")
                if j % 3 == 0 and j < N:
                    sys.stdout.write("| ")
            sys.stdout.write("\n")
            if i % 3 == 0 and i < N:
                sys.stdout.write("{}+{}+{}\n".format("-"*6, "-"*7, "-"*6))
    else:
        for i in crange(1, N):
            for j in crange(1, N):
                k = x_sudoku.get_cell_value(i, j)
                sys.stdout.write("%s" % pad(k) + (" " if j < N else ""))
            sys.stdout.write("\n")  
        
    # Print the time taken
    print("\nTime elapsed: %.5f sec." % (end_time - start_time))
        
    sys.stdout.write("\n")