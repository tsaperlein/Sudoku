#!/usr/bin/env python3

from sudoku import Greater_Than_Sudoku, crange
import sys
import time

if __name__ == "__main__":
    # Read only m*n + 1 lines
    m, n = map(int, input().split())
    
    # Read the board
    board = []
    for i in range(m*n):
        row = input().split()
        for j in range(m*n):
            if row[j] == "_" or row[j] == "0" or row[j] == "." or row[j] == "*" or row[j] == "?":
                row[j] = 0
            else:
                row[j] = int(row[j])
        board.append(row)
        
    # Get the constraints
    constraints = []
    # Until you stop reading "[(" in the start of the line, read the constraints      
    while True:
        try:
            line = input()
            if line.startswith("[("):
                constraints.append(line)
        except EOFError:
            break
        
    # Create a list that each item has this format: i,j,k,l (i,j)
    cons = []
    for i in range(len(constraints)):
        if constraints[i].__contains__("gt"):
            cons.append((constraints[i][2], constraints[i][4], constraints[i][8], constraints[i][10]))
            
    greater_than_puzzle = Greater_Than_Sudoku(m, n, cons)
    
    # Set the values of the board
    for i in range(m*n):
        for j in range(m*n):
            if board[i][j] != 0:
                greater_than_puzzle.set_cell_value(i+1, j+1, board[i][j])
    
    start_time = time.time()
    
    # Solve the puzzle
    if not greater_than_puzzle.solve():
        sys.stdout.write("Greater Than Sudoku puzzle is not valid.\n")
        exit(1)
        
    end_time = time.time()
    
    # Print the solution
    digits = len(str(m*n))
    pad = lambda k: str(k).rjust(digits)
    
    if m == 3 and n == 3:
        for i in crange(1, m*n):
            for j in crange(1, m*n):
                sys.stdout.write(pad(greater_than_puzzle.get_cell_value(i, j)) + " ")
                if j % 3 == 0 and j < m*n:
                    sys.stdout.write("| ")
            sys.stdout.write("\n")
            if i % 3 == 0 and i < m*n:
                sys.stdout.write("{}+{}+{}\n".format("-"*6, "-"*7, "-"*6))
    else:
        for i in crange(1, m*n):
            for j in crange(1, m*n):
                k = greater_than_puzzle.get_cell_value(i, j)
                sys.stdout.write("%s" % pad(k) + (" " if j < m*n else ""))
            sys.stdout.write("\n") 

    # Print the time taken
    print("Time elapsed: %.5f sec." % (end_time - start_time))

    sys.stdout.write("\n")