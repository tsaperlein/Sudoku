#!/usr/bin/env python3

from sudoku import Four_Pyramids_Sudoku, crange
import sys
import time

def print_red_digit(k):
    return "\033[31m" + str(k) +"\033[0m"

if __name__ == "__main__":

    # each Four_Pyramids_Sudoku block has m rows and n columns
    (m, n) = map(int, input().split())

    # initialize the Four_Pyramids_Sudoku solver
    four_pyramids_sudoku = Four_Pyramids_Sudoku(m, n)

    # N = m*n is the number of rows/columns in the Four_Pyramids_Sudoku
    N = four_pyramids_sudoku.size()

    # set the initially known values on the Four_Pyramids_Sudoku
    for i in crange(1, N):
        row = input().split()
        for j in crange(1, N):
            k = row[j - 1]
            if k.isdigit():
                four_pyramids_sudoku.set_cell_value(i, j, int(k))
                
    start_time = time.time()

    # solve the Four_Pyramids_Sudoku
    if not four_pyramids_sudoku.solve():
        sys.stdout.write("Four_Pyramids_Sudoku is not valid.\n")
        exit(1)
        
    end_time = time.time()

    # print the solution
    digits = len(str(N))
    pad = lambda k: str(k).rjust(digits)
    
    # Only for 3x3 Four_Pyramids_Sudoku puzzles
    if m == 3 and n == 3:
        for i in crange(1, N):
            for j in crange(1, N):
                k = four_pyramids_sudoku.get_cell_value(i, j)
                if (i, j) in [(2,1), (3,1), (3,2), (4,1), (4,2), (4,3), (5,1), (5,2), (6,1),
                              (1,4), (1,5), (2,5), (1,6), (2,6), (3,6), (1,7), (2,7), (1,8),
                              (9,2), (9,3), (8,3), (9,4), (8,4), (7,4), (9,5), (8,5), (9,6),
                              (8,9), (7,9), (7,8), (6,9), (6,8), (6,7), (5,9), (5,8), (4,9)]:
                    sys.stdout.write("\033[41m" + str(k) + " " +"\033[0m")
                else:
                    sys.stdout.write(pad(k) + " ")
                if j % 3 == 0 and j < N:
                    sys.stdout.write("| ")
            sys.stdout.write("\n")
            if i % 3 == 0 and i < N:
                sys.stdout.write("{}+{}+{}\n".format("-"*6, "-"*7, "-"*6))
    else:
        for i in crange(1, N):
            for j in crange(1, N):
                k = four_pyramids_sudoku.get_cell_value(i, j)
                sys.stdout.write("%s" % pad(k) + (" " if j < N else ""))
            sys.stdout.write("\n")  
        
    # Print the time taken
    print("\nTime elapsed: %.5f sec." % (end_time - start_time))
        
    sys.stdout.write("\n")