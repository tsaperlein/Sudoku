#!/usr/bin/env python3

from sudoku import Greater_Than_Sudoku, crange
import sys
import time

if __name__ == "__main__":
    
    # The input before the first "[" is the puzzle and the input after the first "[" are the cages
    input = sys.stdin.read().split("[")

    # Take the n and m values from the puzzle
    n, m = map(int, input[0].split("\n")[0].split())
    
    constraints = []
    for constraint_input in input[1:]:
        constraint_input = constraint_input.strip()  # Remove leading/trailing spaces
        if not constraint_input:  # Skip empty lines
            continue
        # Clean the input and split the constraint and type
        constraint = constraint_input.split("],")
        cells = constraint[0]
        constraint_type = constraint[1]
        constraints.append((cells, constraint_type))

    # Initialize the Greater Than Sudoku puzzle
    gt_puzzle = Greater_Than_Sudoku(m, n, constraints)

    start_time = time.time()

    # Solve the puzzle
    if not gt_puzzle.solve():
        sys.stdout.write("Greater Than Sudoku puzzle is not valid.\n")
        exit(1)

    end_time = time.time()

    assignments = 0

    # Print the solution
    digits = len(str(m * n))
    pad = lambda k: str(k).rjust(digits)
    for i in crange(1, m * n):
        for j in crange(1, m * n):
            k = gt_puzzle.get_cell_value(i, j)
            assignments += 1
            sys.stdout.write("%s" % pad(k) + (" " if j < m * n else ""))
        sys.stdout.write("\n")

    # Print the assignments and the time taken
    print("\nAssignments:", assignments)
    print("Time elapsed: %.5f sec." % (end_time - start_time))

    sys.stdout.write("\n")