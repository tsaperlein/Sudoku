#!/usr/bin/env python3

def find_x_wing(sudoku):
    x_wings = []

    # Check for X-wing in rows
    for num in range(1, 10):
        rows_with_num = [row_idx for row_idx, row in enumerate(sudoku) if num in row]
        if len(rows_with_num) == 2:
            col_sets = [set([row[col_idx] for row in sudoku]) for col_idx in range(9)]
            cols_with_num = [col_idx for col_idx, col_set in enumerate(col_sets) if num in col_set]
            if len(cols_with_num) == 2:
                x_wings.append((num, rows_with_num, cols_with_num))

    return x_wings

def cell_name(row, col):
    return f"{chr(col + 65)}{row + 1}"

def print_x_wings(x_wings, sudoku):
    for num, rows, cols in x_wings:
        if len(rows) == 2 and len(cols) == 2:
            print(f"X-wing for number {num}:")
            print(f"Rows: {rows[0] + 1}, {rows[1] + 1}")
            print(f"Columns: {cols[0] + 1}, {cols[1] + 1}")

            cell_names = [cell_name(row, col) for row in rows for col in cols]
            print(f"Cells: {' '.join(cell_names)}\n")

if __name__ == "__main__":
    sudoku = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]

    x_wings = find_x_wing(sudoku)
    if x_wings:
        print("X-wing patterns found:")
        print_x_wings(x_wings, sudoku)
    else:
        print("No X-wing patterns found.")